name: sync_packages

on:
  workflow_dispatch:
  schedule:
    - cron: "40 18 * * *"

env:
  GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
  TARGET_BRANCH: main
  TARGET_REPO_PATH: ${{ github.workspace }}/openwrt-packages

permissions: write-all

jobs:
  sync-packages:
    runs-on: ubuntu-latest

    steps:
    - name: 检出基础仓库
      uses: actions/checkout@v3
      with:
        path: base-repo
        ref: ${{ env.TARGET_BRANCH }}

    - name: 准备目标目录并初始化Git仓库（如果需要）
      run: |
        set -e
        set -x

        TARGET_DIR="$TARGET_REPO_PATH"
        mkdir -p "$TARGET_DIR"

        if [ ! -d "$TARGET_DIR/.git" ]; then
          cd "$TARGET_DIR"
          git init
          git remote add origin "https://$GITHUB_TOKEN@github.com/$GITHUB_REPOSITORY.git"
          git fetch origin "$TARGET_BRANCH"
          git checkout -b "$TARGET_BRANCH" "origin/$TARGET_BRANCH" || true
        fi

        cd "$TARGET_DIR"
        git checkout "$TARGET_BRANCH" || git branch "$TARGET_BRANCH" && git checkout "$TARGET_BRANCH"

    - name: 同步软件包仓库
      run: |
        set -e
        set -x

        TARGET_DIR="$TARGET_REPO_PATH"

        # 定义表示整个源仓库的标识常量（可根据实际需求自定义命名，这里使用ENTIRE_SOURCE_REPO）
        ENTIRE_SOURCE_REPO="ALL"
        
        repos=(
          { package_name: luci-app-wolplus, s_repo: kiddin9/kwrt-packages, s_branch: main, s_path: luci-app-wolplus }
          { package_name: luci-app-openai, s_repo: kiddin9/kwrt-packages, s_branch: main, s_path: luci-app-openai }
          { package_name: openai, s_repo: kiddin9/kwrt-packages, s_branch: main, s_path: openai }
          { package_name: luci-app-chatgpt, s_repo: kiddin9/kwrt-packages, s_branch: main, s_path: luci-app-chatgpt-web }
          { package_name: luci-app-timewol, s_repo: VIKINGYFY/packages, s_branch: main, s_path: luci-app-timewol }
          { package_name: luci-app-advancedplus, s_repo: YunHair/luci-app-advancedplus, s_branch: main }
          { package_name: luci-app-onliner, s_repo: YunHair/luci-app-onliner, s_branch: main }
          { package_name: luci-app-multifrpc, s_repo: YunHair/luci-app-multifrpc, s_branch: main }
          { package_name: luci-app-easymesh, s_repo: theosoft-git/luci-app-easymesh, s_branch: master }
          { package_name: luci-app-tailscale, s_repo: asvow/luci-app-tailscale, s_branch: main }
          { package_name: homeproxy, s_repo: VIKINGYFY/homeproxy, s_branch: main }
          { package_name: luci-app-pushbot, s_repo: zzsj0928/luci-app-pushbot, s_branch: master }
        )

        for repo in "${repos[@]}"; do
          package_name=$(echo "$repo" | jq -r '.package_name')
          s_repo=$(echo "$repo" | jq -r '.s_repo')
          s_branch=$(echo "$repo" | jq -r '.s_branch')
          s_path=$(echo "$repo" | jq -r '.s_path')
          t_path=$(echo "$repo" | jq -r '.t_path')

          # 若s_path没值（不写），则代表同步整个源仓库
          s_path=${s_path:-$ENTIRE_SOURCE_REPO}

          # 若t_path没值（不写），则代表和package_name相同
          t_path=${t_path:-$package_name}

          TEMP_CLONE_DIR="$TARGET_DIR/temp-clone-$RANDOM-$package_name"
          TARGET_PATH="$TARGET_DIR/$t_path"

          echo "开始同步 $package_name"

          # 克隆源仓库并同步文件
          if git ls-remote "https://$GITHUB_TOKEN@github.com/$s_repo.git" &> /dev/null; then
            git clone --depth 1 --branch "$s_branch" "https://$GITHUB_TOKEN@github.com/$s_repo.git" "$TEMP_CLONE_DIR"
          else
            echo "源仓库 $s_repo 不存在，跳过此仓库同步"
            continue
          fi

          # 检查源路径是否存在
          if [ -d "$TEMP_CLONE_DIR/$s_path" ]; then
            mkdir -p "$TARGET_PATH"
            if [ "$s_path" = "$ENTIRE_SOURCE_REPO" ]; then
              rsync -av --exclude '.git' "$TEMP_CLONE_DIR/" "$TARGET_PATH/"
            else
              rsync -av --delete "$TEMP_CLONE_DIR/$s_path/" "$TARGET_PATH/"
            fi
          else
            echo "源目录 $s_path 不存在，跳过此目录同步"
          fi

          rm -rf "$TEMP_CLONE_DIR"
        done

    - name: 添加、提交并推送更改
      run: |
        set -e
        set -x

        cd "$TARGET_REPO_PATH"
        git add .

        if [ -n "$(git status --porcelain)" ]; then
          git config --local user.name "GitHub Actions"
          git config --local user.email "github-actions@github.com"
          TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S")
          COMMIT_MSG="sync：$TIMESTAMP"
          git commit -m "$COMMIT_MSG"
          git push "https://$GITHUB_TOKEN@github.com/$GITHUB_REPOSITORY.git" HEAD:"$TARGET_BRANCH"
        else
          echo "没有需要提交的更改。"
        fi
